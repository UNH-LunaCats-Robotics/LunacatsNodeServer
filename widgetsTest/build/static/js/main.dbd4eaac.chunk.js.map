{"version":3,"sources":["widgets/CircleBackground/CircleBackground.js","widgets/Card/Card.js","widgets/Compass/Compass.js","widgets/FlexShorthand/FlexShorthand.js","widgets/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Circle","className","style","bottom","this","props","y","left","x","opacity","React","Component","CircleBackground","randomPairs","state","inc","key","randCircleData","bind","update","i","Math","random","window","innerWidth","innerHeight","xAcc","yAcc","life","lifeDecay","length","splice","push","setState","interval","setInterval","clearInterval","map","Card","children","DirectionAimer","transform","angle","width","height","ColumnContainerStyle","flexDirection","ColumnContainerExtendedStyle","margin","padding","RowContainerExtendedStyle","jsonConcat","jsonA","jsonB","retVal","key2","ColumnContainerExtended","RowContainerExtended","Sidebar","flexGrow","App","Compass","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbd4eaac.chunk.js","sourcesContent":["import React from 'react'\n\nimport '../generic.scss'\nimport './circlebackground.scss'\n\n\nclass Circle  extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"Circle\" style= {{\n                bottom:this.props.y+\"px\",\n                left:this.props.x+\"px\",\n                opacity: this.props.opacity\n            }}/>\n        )\n    }\n}\nclass CircleBackground extends React.Component {\n\n    randomPairs = [];\n    state = {\n        inc: 0\n    }\n    key = 0\n    randCircleData() {\n        this.key ++;\n        return {\n            i: this.key,\n            x: Math.random() * window.innerWidth,\n            y: Math.random() * window.innerHeight,\n\n            xAcc: (Math.random() - 0.5)* 0.5,\n            yAcc: (Math.random() -0.5)* 0.5, \n            life: Math.random(),\n            lifeDecay: (Math.random() * 0.002) + 0.0005\n        }\n    }\n\n    constructor(props) {\n        super(props)\n\n\n        this.randCircleData = this.randCircleData.bind(this)\n        this.update = this.update.bind(this)\n    }\n\n    update() {\n        \n\n        for(var i = 0; i < this.randomPairs.length; i++) {\n            this.randomPairs[i].x    += this.randomPairs[i].xAcc;\n            this.randomPairs[i].y    += this.randomPairs[i].yAcc;\n            this.randomPairs[i].life -= this.randomPairs[i].lifeDecay;\n            if(this.randomPairs[i].life < 0) {\n                this.randomPairs.splice(i,1)\n            }\n        }\n\n\n        if(this.state.inc > 200000/window.innerWidth) {\n            \n            this.randomPairs.push(this.randCircleData())\n            this.setState({inc: 0})\n        }\n        else {\n            this.setState({inc: this.state.inc + 1})\n        }\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(this.update, 7);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"CircleBackground\">\n                {this.randomPairs.map( (inc) => \n                    {\n                        return <Circle key={inc.i} x= {inc.x} y = {inc.y} opacity={inc.life}/>\n                    }\n                    \n                )}\n            </div>\n        )\n    }\n}\n\nexport default CircleBackground;","import React from 'react'\n\n\nimport '../generic.scss'\nimport './card.scss'\n\n\nclass Card extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Card Container\" style={this.props.style}>\n                {this.props.children}\n            </div>\n        )\n        \n    }\n}\n\nexport default Card","import React from 'react'\n\nimport '../generic.scss'\nimport './compass.scss';\n\nimport {MdNavigation} from \"react-icons/md\"\n\nclass DirectionAimer extends React.Component {\n\n    render () { \n        return (\n        <div className=\"Compass\" style={{ transform: \"rotate(\"+this.props.angle+\"deg)\"}}>\n            <div className=\"OuterCircle\">\n                <div className=\"InnerCircle\">\n                    <MdNavigation style={{width:\"50px\", height:\"50px\"}}/>\n                </div>\n            </div>\n        </div>)\n    }\n}\n\nexport default DirectionAimer","\nimport React from 'react'\n\nimport '../generic.scss'\nimport './flexShorthand.scss'\n\n\nconst ColumnContainerStyle = { flexDirection:\"column\"}\nconst ColumnContainerExtendedStyle = { margin:0, padding:0, flexDirection:\"column\", width:\"100%\", height:\"100%\"}\nconst RowContainerExtendedStyle = { margin:0, padding:0, width:\"100%\", height:\"100%\"}\n\nfunction jsonConcat(jsonA, jsonB) {\n    if(jsonB == null)\n        return jsonA;\n    if(jsonA == null)\n        return jsonB;\n    \n    var retVal = {}\n    \n    for(var key in jsonA) {\n        retVal[key] = jsonA[key]\n    }\n    for(var key2 in jsonB) {\n        retVal[key2] = jsonB[key2]\n    }\n\n    return retVal;\n}\n\nclass ColumnContainer extends React.Component {\n    render() {\n        return ( \n            <div className = \"Container\"  style = {jsonConcat(ColumnContainerStyle,this.props.style)}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\nclass ColumnContainerExtended extends React.Component {\n    render() {\n        return ( \n            <div className = \"Container\" style = {jsonConcat(ColumnContainerExtendedStyle,this.props.style)}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\n\nclass RowContainer extends React.Component {\n    render() {\n        return (\n            <div style={this.props.style} className=\"Container\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nclass RowContainerExtended extends React.Component {\n    render() {\n        return (\n            <div className=\"Container\" style = {jsonConcat(RowContainerExtendedStyle,this.props.style)}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport {ColumnContainer, ColumnContainerExtended, RowContainer, RowContainerExtended};","\nimport '../generic.scss'\nimport './sidebar.scss'\n\n\nimport React from 'react'\n\nimport Card from '../Card/Card'\n// eslint-disable-next-line \nimport { ColumnContainer, ColumnContainerExtended, RowContainer, RowContainerExtended } from '../FlexShorthand/FlexShorthand'\n\n\nclass Sidebar extends React.Component {\n    render() {\n        return (\n            <ColumnContainerExtended style={{width:\"max-content-size\"}}>\n            <Card style={{flexGrow:1}}>\n                <ColumnContainerExtended style= {{width:\"220px\"}}>\n                    <h4 style={{margin:\"15px\"}}>Lunacats App</h4>\n                    <div style= {{flexGrow:1}}>\n                        \n                    </div>\n                </ColumnContainerExtended>\n            </Card>\n          </ColumnContainerExtended>\n        )\n    }\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.scss';\n\nimport CircleBackground from './widgets/CircleBackground/CircleBackground'\nimport Card from './widgets/Card/Card'\n\nimport Compass from './widgets/Compass/Compass'\nimport Sidebar from './widgets/Sidebar/Sidebar'\n// eslint-disable-next-line \nimport { ColumnContainer, ColumnContainerExtended, RowContainer, RowContainerExtended } from './widgets/FlexShorthand/FlexShorthand'\n\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <div className=\"App App-header\" >\n        <CircleBackground />\n        <RowContainerExtended>\n          <Sidebar/>\n\n          <ColumnContainerExtended >\n            <Card>\n              <Compass angle={45}/>\n            </Card>\n          </ColumnContainerExtended>\n        </RowContainerExtended>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}