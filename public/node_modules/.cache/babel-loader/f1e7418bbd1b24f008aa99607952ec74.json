{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cryst\\\\Desktop\\\\LuncatsNode\\\\LunacatsNodeServer\\\\public\\\\components\\\\Pixy.js\";\nimport React from 'react';\n\nvar PixyImgBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PixyImgBox, _React$Component);\n\n  function PixyImgBox(props, context) {\n    var _this;\n\n    _classCallCheck(this, PixyImgBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PixyImgBox).call(this, props, context));\n    _this.state = {\n      checked: false\n    };\n    _this.count = 0;\n    _this.data = [];\n    _this.boxes = [];\n    _this.width = 0;\n    _this.height = 0;\n    _this.left = 0;\n    _this.top = 0;\n    _this.seq = -4;\n    _this.whiteBox = [];\n    return _this;\n  } //This sends a json string with just a cmd specified to the robot\n\n\n  _createClass(PixyImgBox, [{\n    key: \"sendCmd\",\n    value: function sendCmd() {\n      var ip = \"http://localhost:3000/getPixyData\";\n      return fetch(ip).then(function (resp) {\n        return resp.json();\n      }).then(function (data) {\n        return data;\n      });\n    }\n  }, {\n    key: \"pixyBoxInfo\",\n    value: function () {\n      var _pixyBoxInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var myJson, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sendCmd();\n\n              case 2:\n                myJson = _context.sent;\n                //extract JSON from the http response\n                console.log(_JSON$stringify(myJson)); // let myJson = JSON.parse('{\"C\": 3, \"H1\": 6, \"H2\": 4, \"S2\": 1, \"H0\": 39, \"S0\": 1, \"X2\": 291, \"W2\": 14, \"W1\": 14, \"W0\": 62, \"Y1\": 56, \"Y0\": 139, \"X0\": 283, \"X1\": 135, \"S1\": 1, \"Y2\": 112}');\n                //let myJson = JSON.parse('{\"C\": 1, \"H0\": 39, \"S0\": 1, \"W0\": 62, \"Y0\": 139, \"X0\": 283}');\n\n                this.count = myJson[\"C\"];\n                console.log(this.count);\n\n                for (i = 0; i < this.count; i++) {\n                  this.width = myJson[\"W\" + i] / 320;\n                  this.height = myJson[\"H\" + i] / 200;\n                  this.left = myJson[\"X\" + i] / 320 - this.width / 2;\n                  this.top = myJson[\"Y\" + i] / 200 - this.height / 2;\n                  this.data = [this.width, this.height, this.left, this.top];\n                  this.boxes[i] = this.data;\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function pixyBoxInfo() {\n        return _pixyBoxInfo.apply(this, arguments);\n      }\n\n      return pixyBoxInfo;\n    }()\n  }, {\n    key: \"boxArray\",\n    value: function boxArray() {\n      this.pixyBoxInfo();\n\n      for (var i = 0; i < this.boxes.length; i++) {\n        this.whiteBox[i] = React.createElement('div', {\n          id: 'pixyImg',\n          style: {\n            width: this.boxes[i][0] * 100 + '%',\n            height: this.boxes[i][1] * 100 + '%',\n            left: this.boxes[i][2] * 100 + '%',\n            top: this.boxes[i][3] * 100 + '%'\n          }\n        });\n      }\n\n      console.log(\"WWW\" + this.whiteBox.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.pixyBoxInfo(); // return React.createElement(\"div\", {\n      //   id: \"pixyView\"\n      // }, React.createElement(\"header\", {\n      //   id: \"lunaHeader\"\n      // }, \"•~•~•~•~•~•~•~•~•~ Pixy View ~•~•~•~•~•~•~•~•~•\"), React.createElement(\"div\", {\n      //   id: \"pixyViewBox\"\n      // },React.createElement(\"div\", {\n      //   id: \"pixyViewBox\"\n      // }, this.boxes.map((box, i) => {return React.createElement('div', { id: 'pixyImg', style: {\n      //   id: i,\n      //   key: i,\n      //   width: box[0] * 100 + '%',\n      //   height: box[1] * 100 + '%',\n      //   left: box[2] * 100 + '%',\n      //   top: box[3] * 100 + '%',\n      // }})}))))\n\n      return React.createElement(\"div\", {\n        class: \"pixyView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        id: \"lunaHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~ Pixy View ~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022~\\u2022\"), React.createElement(\"div\", {\n        id: \"pixyViewBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PixyImgBox;\n}(React.Component); //PixyImgBox = React.createElement(PixyImgBox);\n// export default class Pixy extends React.Component{\n//   //This sends the json to the raspberry pi and gets a response\n//   async sendJson(json) {\n//     console.log(\"Sent:\\t\" + json);\n//     try {\n//       const response = fetch(json, {\n//         mode: 'cors'\n//       });\n//       console.log(\"Got:\\t\" + response);\n//       return response;\n//     } catch {\n//       window.location.href = '#popup';\n//     }\n//   }\n//   //This sends a json string with just a cmd specified to the robot\n//   sendCmd(cmd) {\n//     const ip = \"http://localhost:3000/getPixyData\";\n//     return this.sendJson(ip);\n//   }\n//   render() {\n//     return React.createElement(\"div\", {\n//       id: \"pixyView\"\n//     }, React.createElement(\"header\", {\n//       id: \"lunaHeader\"\n//     }, \"•~•~•~•~•~•~•~•~•~ Pixy View ~•~•~•~•~•~•~•~•~•\"), React.createElement(\"div\", {\n//       id: \"pixyViewBox\"\n//     }, React.createElement(PixyImgBox)));\n//   }\n// }\n// //Pixy = React.createFactory(Pixy);\n\n\nexport { PixyImgBox as default };","map":{"version":3,"sources":["C:\\Users\\cryst\\Desktop\\LuncatsNode\\LunacatsNodeServer\\public\\components\\Pixy.js"],"names":["React","PixyImgBox","props","context","state","checked","count","data","boxes","width","height","left","top","seq","whiteBox","ip","fetch","then","resp","json","sendCmd","myJson","console","log","i","pixyBoxInfo","length","createElement","id","style","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nexport default class PixyImgBox extends React.Component {\r\n    constructor(props, context) {\r\n      super(props, context);\r\n  \r\n      this.state = {\r\n        checked: false\r\n      };\r\n      this.count = 0;\r\n      this.data = [];\r\n      this.boxes = [];\r\n      this.width = 0;\r\n      this.height = 0;\r\n      this.left = 0;\r\n      this.top = 0;\r\n      this.seq = -4;\r\n      this.whiteBox = [];\r\n    }\r\n  \r\n    //This sends a json string with just a cmd specified to the robot\r\n    sendCmd() {\r\n      const ip = \"http://localhost:3000/getPixyData\";\r\n      return  fetch(ip).then((resp) => resp.json()).then(function(data) {\r\n        return data;\r\n      })\r\n  \r\n    }\r\n  \r\n    async pixyBoxInfo() {\r\n      //const getPixyInfoCmd = 5;\r\n      let myJson = await this.sendCmd(); //extract JSON from the http response\r\n      console.log(JSON.stringify(myJson))\r\n      // let myJson = JSON.parse('{\"C\": 3, \"H1\": 6, \"H2\": 4, \"S2\": 1, \"H0\": 39, \"S0\": 1, \"X2\": 291, \"W2\": 14, \"W1\": 14, \"W0\": 62, \"Y1\": 56, \"Y0\": 139, \"X0\": 283, \"X1\": 135, \"S1\": 1, \"Y2\": 112}');\r\n      //let myJson = JSON.parse('{\"C\": 1, \"H0\": 39, \"S0\": 1, \"W0\": 62, \"Y0\": 139, \"X0\": 283}');\r\n  \r\n      this.count = myJson[\"C\"];\r\n      console.log(this.count);\r\n      for (let i = 0; i < this.count; i++) {\r\n        this.width = myJson[\"W\" + i] / 320;\r\n        this.height = myJson[\"H\" + i] / 200;\r\n        this.left = myJson[\"X\" + i] / 320 - this.width / 2;\r\n        this.top = myJson[\"Y\" + i] / 200 - this.height / 2;\r\n        this.data = [this.width, this.height, this.left, this.top];\r\n        this.boxes[i] = this.data;\r\n      }\r\n    }\r\n  \r\n    boxArray() {\r\n      this.pixyBoxInfo()\r\n      for (var i = 0; i < this.boxes.length; i++) {\r\n        this.whiteBox[i] = React.createElement('div', {\r\n          id: 'pixyImg',\r\n          style: {\r\n            width: this.boxes[i][0] * 100 + '%',\r\n            height: this.boxes[i][1] * 100 + '%',\r\n            left: this.boxes[i][2] * 100 + '%',\r\n            top: this.boxes[i][3] * 100 + '%',\r\n          }\r\n        })\r\n      }\r\n      console.log(\"WWW\" + this.whiteBox.length);\r\n    }\r\n  \r\n    render() {\r\n      this.pixyBoxInfo();\r\n      \r\n      // return React.createElement(\"div\", {\r\n      //   id: \"pixyView\"\r\n      // }, React.createElement(\"header\", {\r\n      //   id: \"lunaHeader\"\r\n      // }, \"•~•~•~•~•~•~•~•~•~ Pixy View ~•~•~•~•~•~•~•~•~•\"), React.createElement(\"div\", {\r\n      //   id: \"pixyViewBox\"\r\n      // },React.createElement(\"div\", {\r\n      //   id: \"pixyViewBox\"\r\n      // }, this.boxes.map((box, i) => {return React.createElement('div', { id: 'pixyImg', style: {\r\n      //   id: i,\r\n      //   key: i,\r\n      //   width: box[0] * 100 + '%',\r\n      //   height: box[1] * 100 + '%',\r\n      //   left: box[2] * 100 + '%',\r\n      //   top: box[3] * 100 + '%',\r\n      // }})}))))\r\n\r\n      return (\r\n        <div class=\"pixyView\">\r\n          <header id=\"lunaHeader\">•~•~•~•~•~•~•~•~•~ Pixy View ~•~•~•~•~•~•~•~•~•</header>\r\n          <div id=\"pixyViewBox\"></div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  //PixyImgBox = React.createElement(PixyImgBox);\r\n  \r\n  // export default class Pixy extends React.Component{\r\n  \r\n  //   //This sends the json to the raspberry pi and gets a response\r\n  //   async sendJson(json) {\r\n  //     console.log(\"Sent:\\t\" + json);\r\n  //     try {\r\n  //       const response = fetch(json, {\r\n  //         mode: 'cors'\r\n  //       });\r\n  \r\n  //       console.log(\"Got:\\t\" + response);\r\n  //       return response;\r\n  //     } catch {\r\n  //       window.location.href = '#popup';\r\n  //     }\r\n  //   }\r\n  \r\n  //   //This sends a json string with just a cmd specified to the robot\r\n  //   sendCmd(cmd) {\r\n  //     const ip = \"http://localhost:3000/getPixyData\";\r\n  //     return this.sendJson(ip);\r\n  //   }\r\n  \r\n  //   render() {\r\n  //     return React.createElement(\"div\", {\r\n  //       id: \"pixyView\"\r\n  //     }, React.createElement(\"header\", {\r\n  //       id: \"lunaHeader\"\r\n  //     }, \"•~•~•~•~•~•~•~•~•~ Pixy View ~•~•~•~•~•~•~•~•~•\"), React.createElement(\"div\", {\r\n  //       id: \"pixyViewBox\"\r\n  //     }, React.createElement(PixyImgBox)));\r\n  //   }\r\n  // }\r\n  // //Pixy = React.createFactory(Pixy);"]},"metadata":{},"sourceType":"module"}